<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu忘记root密码和登录密码解决方法</title>
    <url>/Ubuntu%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E5%92%8C%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Ubuntu忘记登录密码进行重置时，需要用到ROOT密码，若此时ROOT密码也忘记了，那就尴尬了，不过没关系，ROOT密码也有办法重置滴。如果记得ROOT密码，可以直接跳到登录密码重置段落，否则还是乖乖从头看起吧。</p>
<hr>
<a id="more"></a>    

<h2 id="一、重置ROOT密码"><a href="#一、重置ROOT密码" class="headerlink" title="一、重置ROOT密码"></a>一、重置ROOT密码</h2><p>1、在Ubuntu开机阶段按<strong>shitf键</strong>，进入这个界面后选择<strong>高级选项</strong>回车<br><img src="https://img-blog.csdnimg.cn/20200513231202333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、进入这个界面后<strong>不要按回车</strong>，选中这个然后按<strong>e</strong>进入编辑模式<br><img src="https://img-blog.csdnimg.cn/20200513231443115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、进入这里后往下找，找到画线这一行，然后把<strong>ro</strong>后面的<code>recovery nodeset</code>替换成<br><code>quiet splash rw init=/bin/bash</code>然后按F10启动<img src="https://img-blog.csdnimg.cn/2020051323170876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513232000487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、进入这个界面后输入：passwd，此时系统就会提示输入新的ROOT密码，这时ROOT密码就重置成功了。<br><img src="https://img-blog.csdnimg.cn/20200513232059398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="二、重置登录密码"><a href="#二、重置登录密码" class="headerlink" title="二、重置登录密码"></a>二、重置登录密码</h2><p>1、2、步骤与重置ROOT密码相同<br>3、进入这里后同样是找到这一行，但是这次是把<code>ro</code>替换为<code>rw</code>，然后按ctrl+x启动<br><img src="https://img-blog.csdnimg.cn/20200513232501991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200513232608553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、进入这个页面后，选择root，即红色光标选中的那一行，回车继续后会提示输入ROOT密码，输入后进入下一步<br><img src="https://img-blog.csdnimg.cn/20200513232808198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、在这里输入<code>passwd xxx(xxx是你忘记登录密码的用户名）</code>，回车后提示输入新的登录密码，到这里登录密码就重置完成了<br><img src="https://img-blog.csdnimg.cn/20200513233052896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Oracle Linux中进入sqlplus命令行后无法使用删除键的问题</title>
    <url>/%E8%A7%A3%E5%86%B3Oracle%20Linux%E4%B8%AD%E8%BF%9B%E5%85%A5sqlplus%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%8E%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%88%A0%E9%99%A4%E9%94%AE%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装完Oracle数据库后进入sqlplus时发现删除键无法使用，所以就通过网络搜索了一下解决办法，<br>现在自己总结了一下解决方法供大家参考。</p>
<hr>
<a id="more"></a>

<ol>
<li>进入oracle linux的根目录下即<code>cd /home/oracle</code></li>
<li>用vim打开.bash_profile文件（这个是隐藏文件，用ls命令不会显示的）命令行输入<code>vi .bash_profile</code></li>
<li>在最后面加上一行<code>stty erase ^H</code>然后<code>：wq</code>保存退出</li>
<li>重新加载一下.bash_profile文件<code>source .bash_profile</code></li>
<li>关闭会话窗重新打开就会发现删除键可以用了</li>
</ol>
<blockquote>
<p>此方法只能修改删除键使其生效，对方向键无用，因为我只对删除键有需求，所以需要修改方向键的朋友请自行百度，嘿嘿</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200511211411644.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200511211445923.png" alt="在这里插入图片描述"><br>转载来自：<a href="https://blog.csdn.net/weixin_44336978/article/details/98039788?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">linux里sqlplus下删除退格，出现^H</a></p>
]]></content>
      <categories>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo+github搭建自己的个人博客</title>
    <url>/%E4%BD%BF%E7%94%A8Hexo+github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo+github建立的个人博客是一个静态的个人博客，每次的更新操作都需要在本地进行，完成后再重新部署到github上</p>
<hr>
<a id="more"></a>
<h2 id="一、步骤目录"><a href="#一、步骤目录" class="headerlink" title="一、步骤目录"></a>一、步骤目录</h2><ol>
<li>安装nodeJS(软件）</li>
<li>注册github并新建仓库（网站）</li>
<li>安装git（软件）</li>
<li>githubSSH配置</li>
<li>安装hexo并搭建本地网站</li>
<li>把本地搭建了hexo网站部署到github上</li>
</ol>
<h2 id="二、详细步骤"><a href="#二、详细步骤" class="headerlink" title="二、详细步骤"></a>二、详细步骤</h2><h3 id="安装nodeJS-软件）"><a href="#安装nodeJS-软件）" class="headerlink" title="安装nodeJS(软件）"></a>安装nodeJS(软件）</h3><p><img src="https://img-blog.csdnimg.cn/2020051012221891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>介绍</strong>：Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用，所以还是把这玩意儿装了。<br><strong>官方下载地址</strong>：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里进入</a><br>(说明：LTS为长期支持版，Current为当前最新版，建议下载LTS版)<br>安装步骤：一路next就好了。<br><strong>验证是否安装成功</strong>：快捷键Win+R,输入cmd回车，在命令面板中输入<code>node -v</code>,若显示了版本号则安装成功<br><img src="https://img-blog.csdnimg.cn/20200510122704440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="注册github账号并新建仓库"><a href="#注册github账号并新建仓库" class="headerlink" title="注册github账号并新建仓库"></a>注册github账号并新建仓库</h2><p><strong>注册github账户</strong>：百度即可</p>
<p><strong>新建仓库</strong>：登录github,在github上创建一个仓库repository，仓库名称要写成，否则后续无法进行</p>
<blockquote>
<p>XXXX.github.io</p>
</blockquote>
<p>(XXXX)为你注册的github账户名称<br><img src="https://img-blog.csdnimg.cn/20200510123515585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200510124130396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200511081605424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入刚刚创建的仓库，点击setting<br><img src="https://img-blog.csdnimg.cn/20200510131332305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下拉找到GitHub Pages,圈内的网址就是以后别人访问你博客的网址了<br><img src="https://img-blog.csdnimg.cn/20200511081348842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><strong>官方下载网址</strong>：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">点击这里下载</a><br><strong>安装步骤</strong>：双击下载好的exe文件，一路next就好了<br><img src="https://img-blog.csdnimg.cn/20200510132334378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="githubSSH配置"><a href="#githubSSH配置" class="headerlink" title="githubSSH配置"></a>githubSSH配置</h2><p>首先选定一个文件夹作为你博客的<strong>本地仓库</strong><br>然后进入该文件夹，右键选择git bash here<br>然后输入<code>ssh-keygen -t rsa -C&quot;xxx@qq.com&quot;</code>回车<br>注意！！！””冒号中的内容要换成你注册github时填写的邮箱<br><img src="https://img-blog.csdnimg.cn/20200510133626572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时会提醒你输入存放SSH密匙的位置，可直接回车，会默认放在C:\Users\用户名.ssh文件夹下，也可以输入你想存放的位置<br>回车后会提示设置两次密码，不设置密码的话直接回车两次即可，建议直接两次回车<br>看到以下画面即设置成功<br><img src="https://img-blog.csdnimg.cn/20200510134226363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开github.com，点击右上角，选择settings<br><img src="https://img-blog.csdnimg.cn/20200510134440395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择SSH and GPG keys，点击new SSH Keys<br><img src="https://img-blog.csdnimg.cn/20200510134645832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入C:\Users\用户名.ssh文件夹下用记事本方式打开id_rsa.pub，并复制里面的内容填写到Key中，Title内可以随意填写，然后点击Add SSH key。到这里就设置好SSH了<br><img src="https://img-blog.csdnimg.cn/20200510134900628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="安装hexo并搭建本地网站"><a href="#安装hexo并搭建本地网站" class="headerlink" title="安装hexo并搭建本地网站"></a>安装hexo并搭建本地网站</h2><p><strong>在本地仓库文件夹中右键打开git bash here</strong><br>输入<code>npm install hexo-cli -g</code>回车<br><img src="https://img-blog.csdnimg.cn/20200510135538826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来和上面一样，依次输入</p>
<ol>
<li><code>hexo init</code></li>
<li><code>npm install</code></li>
<li><code>hexo server</code>或者<code>hexo s</code></li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200510140022507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候你的本地网站就已经建好了，复制图片上的网址<code>http://localhost:4000</code>粘贴到浏览器就可以访问你的本地网站了</p>
<h2 id="把本地搭建了hexo网站部署到github上"><a href="#把本地搭建了hexo网站部署到github上" class="headerlink" title="把本地搭建了hexo网站部署到github上"></a>把本地搭建了hexo网站部署到github上</h2><p>打开本地仓库，对<code>_config.yml</code>文件进行编辑<br>打开文件后找到deploy<br>像下图一样配置<br>划红线的位置填入你的github账户名</p>
<p><img src="https://img-blog.csdnimg.cn/20200510140509982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzM3MTI0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置完后保存，然后在本地仓库打开git，输入<code>npm install hexo-deployer-git --save</code>安装插件<br>最后就是把本地网站通过git部署到github上<br>依次在git上输入一下命令</p>
<ol>
<li><code>hexo g</code></li>
<li><code>hexo d</code></li>
</ol>
<p>这时候你的本地网站就已经部署到你的github上了。通过任意浏览器输入网址<code>https://你的github账户名.github.io</code>就可以访问你的个人博客了</p>
]]></content>
      <categories>
        <category>Hexo，github</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反射知识点</title>
    <url>/JAVA%E5%8F%8D%E5%B0%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>反射中的一些基本用法</p>
<hr>
<a id="more"></a>    

<h2 id="一、获取Class对象的三种方法"><a href="#一、获取Class对象的三种方法" class="headerlink" title="一、获取Class对象的三种方法"></a>一、获取Class对象的三种方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">"完整的包名"</span>);</span><br><span class="line">Class cls = 类名<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class cls = 对象名.getClass;</span><br></pre></td></tr></table></figure>

<h2 id="二、获取类中的成员变量"><a href="#二、获取类中的成员变量" class="headerlink" title="二、获取类中的成员变量"></a>二、获取类中的成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] f= Class对象.getFields();<span class="comment">//获取所有public修饰的成员变量</span></span><br><span class="line">Field f= Class对象.getField(<span class="string">"要获取的变量名"</span>);<span class="comment">//获取指定public变量</span></span><br><span class="line">Field[] f= Class对象.getDeclaredFields();<span class="comment">//获取包括私有的所有成员变量</span></span><br><span class="line">Field f= Class对象.getDeclaredField(<span class="string">"String name"</span>);<span class="comment">//获取指定变量包括私有变量</span></span><br></pre></td></tr></table></figure>

<p> 对获取的成员变量赋值：<br> <strong>需要注意的是</strong>:针对方法3、4在获取了私有成员变量后，必须进行“忽略访问权限修饰符的安全检查”(暴力反射)，否则在后续使用该成员变量时会报错。<br> <strong>忽略访问权限修饰符的安全检查</strong>：<code>f.setAccessible(true);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.set(类对象名，<span class="string">"赋值的内容"</span>)</span><br><span class="line">Object o = f.get(类对象名);</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure>
<h2 id="三、获取类中的构造方法"><a href="#三、获取类中的构造方法" class="headerlink" title="三、获取类中的构造方法"></a>三、获取类中的构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor[] constructor = Class对象.getConstructors();<span class="comment">//获取所有public修饰的构造方法</span></span><br><span class="line">Constructor constructor = Class对象.getConstructor(参数<span class="number">1</span>类型<span class="class">.<span class="keyword">class</span>,参数2类型.<span class="title">class</span>)</span>;<span class="comment">//获取指定public构造方法</span></span><br><span class="line">Constructor[] constructor = Class对象.getDeclaredConstructors();<span class="comment">//获取包括私有的所有构造方法</span></span><br><span class="line">Constructor constructor = Class对象.getDeclaredConstructor(参数<span class="number">1</span>类型<span class="class">.<span class="keyword">class</span>,参数2类型.<span class="title">class</span>)</span>;<span class="comment">//获取指定构造方法包括私有构造方法</span></span><br></pre></td></tr></table></figure>

<p>使用获取的构造方法new一个对象：<br> <strong>需要注意的是</strong>:针对方法3、4在获取了私有构造方法后，必须进行“忽略访问权限修饰符的安全检查”(暴力反射)，否则在后续使用该构造方法时会报错。<br> <strong>忽略访问权限修饰符的安全检查</strong>：<code>constructor.setAccessible(true);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o3 = constructor.newInstance(构造方法参数, 构造方法参数);新建对象</span><br><span class="line">System.out.println(o3);</span><br><span class="line"><span class="comment">//一般调用空参构造是这样子的</span></span><br><span class="line">Object o3 = Class对象.newInstance();</span><br></pre></td></tr></table></figure>
<h2 id="四、获取类中的成员方法"><a href="#四、获取类中的成员方法" class="headerlink" title="四、获取类中的成员方法"></a>四、获取类中的成员方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] me = Class对象.getMethods();<span class="comment">//获取所有public修饰的成员方法</span></span><br><span class="line">Method me = Class对象.getMethod(<span class="string">"方法名称"</span>，参数类型<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//获取指定public成员方法</span></span><br><span class="line">Method[] me = Class对象.getDeclaredMethods();<span class="comment">//获取包括私有的所有成员方法</span></span><br><span class="line">Method me = Class对象.getDeclaredMethod(<span class="string">"方法名称"</span>，参数类型<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//获取指定成员方法包括私有成员方法</span></span><br></pre></td></tr></table></figure>

<p> 使用获取的成员方法：</p>
<p> <strong>需要注意的是</strong>:针对方法3、4在获取了私有成员方法后，必须进行“忽略访问权限修饰符的安全检查”(暴力反射)，否则在后续使用该成员方法时会报错。<br> <strong>忽略访问权限修饰符的安全检查</strong>：<code>me.setAccessible(true);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">me.invoke(调用方法的对象名，方法的参数);</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>JAVA反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记（学习视频：B站的狂神说JAVA系列）</title>
    <url>/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91%EF%BC%9AB%E7%AB%99%E7%9A%84%E7%8B%82%E7%A5%9E%E8%AF%B4JAVA%E7%B3%BB%E5%88%97%EF%BC%89.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>Mybatis知识点</p>
<hr>
<a id="more"></a>    



<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>视频地址：<a href="https://www.bilibili.com/video/BV1NE411Q7Nx?p=1" target="_blank" rel="noopener">B站狂神说JAVA—Mybatis</a><br>配置用的</p>
<ul>
<li>jdk13.0.2 （jdk1.7以上均可） </li>
<li>Maven 3.6.3 </li>
<li>MySQL 5.7 （mysql5.6以上均可）</li>
</ul>
<h1 id="一-配置"><a href="#一-配置" class="headerlink" title="一. 配置"></a>一. 配置</h1><p>官网文档： <a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p>
<p><strong>pom.xml</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;batis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;batis-maven&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;mybatis-01&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--导入依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p><strong>src/main/resources</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true&amp;amp;</span></span><br><span class="line"><span class="string">                userUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"hdk123"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p><strong>src/main/java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><ol>
<li><p>实体类<br>src/main/java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pogo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dao接口</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pogo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接口实现类<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace绑定一个对应的mapper接口--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.dao.UserDao"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--id方法名--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUserList"</span> resultType=<span class="string">"com.hou.pogo.User"</span>&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.hou.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>mybatis-config.xml</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true&amp;amp;</span></span><br><span class="line"><span class="string">                userUnicode=true&amp;amp;characterEncoding=UTF-8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"hdk123"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--每一个mapper.xml都需要注册--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/hou/dao/UserMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>在两个pom.xml中加入</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入包</li>
<li>配置数据库</li>
<li>建造工具类</li>
</ol>
<p><strong>SqlSessionFactoryBuilder</strong><br>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p>
<p><strong>SqlSessionFactory</strong><br>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p>
<p><strong>SqlSession</strong><br>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 下面的示例就是一个确保 SqlSession 关闭的标准模式</p>
<h1 id="二、增删改查"><a href="#二、增删改查" class="headerlink" title="二、增删改查"></a>二、增删改查</h1><p><strong>1. namespace</strong><br>namespace中的包名要和接口一致</p>
<p><strong>2. select</strong></p>
<ul>
<li>id：就是对应的namespace的方法名</li>
<li>resultType：sql语句的返回值！</li>
<li>parameterType： 参数类型！</li>
</ul>
<p>1、编写接口<br>2、编写对应的mapper中的对应语句<br>3、测试</p>
<p><strong>UserMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pogo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserMapper.xml</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace绑定一个对应的mapper接口--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.dao.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--id方法名--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getUserList"</span> resultType=<span class="string">"com.hou.pogo.User"</span>&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserById"</span> resultType=<span class="string">"com.hou.pogo.User"</span></span><br><span class="line">    parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--对象中的属性可以直接取出来--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"addUser"</span> parameterType=<span class="string">"com.hou.pogo.User"</span>&gt;</span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.hou.pogo.User"</span>&gt;</span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id =#&#123;id&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Test</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pogo.User;</span><br><span class="line"><span class="keyword">import</span> com.hou.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// method 2</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; userList = sqlSession.selectList("com.hou.dao.UserDao.getUserList");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(User user: userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改需要提交事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.addUser(<span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">"hou"</span>,<span class="string">"123456"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.updateUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">"hou"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：增删改需要提交事务。</p>
<p><strong>3. Map</strong><br>假如我们的实体类属性过多，用map，传递map的key</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"addUser2"</span> parameterType=<span class="string">"map"</span>&gt;</span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id1&#125;, #&#123;name1&#125;, #&#123;pwd1&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"id1"</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"name1"</span>,<span class="string">"dong"</span>);</span><br><span class="line">    map.put(<span class="string">"pwd1"</span>,<span class="string">"12345"</span>);</span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.模糊查询</strong><br>java代码执行的时候，传递通配符%</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getUserLike"</span> resultType=<span class="string">"com.hou.pogo.User"</span>&gt;</span><br><span class="line">    select * from mybatis.user where name like #&#123;value&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;User&gt; list = mapper.getUserLike(<span class="string">"%o%"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user : list)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三-配置解析"><a href="#三-配置解析" class="headerlink" title="三. 配置解析"></a>三. 配置解析</h1><p><strong>1. 核心配置文件</strong><br><strong>mybatis-config.xml</strong></p>
<blockquote>
<p>configuration（配置）<br>    properties（属性）<br>    settings（设置）<br>    typeAliases（类型别名）<br>    typeHandlers（类型处理器）<br>    objectFactory（对象工厂）<br>    plugins（插件）<br>        environments（环境配置）<br>            environment（环境变量）<br>            transactionManager（事务管理器）<br>    dataSource（数据源）<br>    databaseIdProvider（数据库厂商标识）<br>    mappers（映射器）</p>
</blockquote>
<p><strong>2. 环境配置（environments）</strong><br>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>Mybatis 默认的事务管理器是JDBC，连接池：POOLED</p>
<p><strong>3. 属性</strong><br>我们可以通过properties属性来引用配置文件</p>
<p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。 （db.properties）</p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<blockquote>
<p>driver = com.mysql.jdbc.Driver<br>url = “jdbc:mysql://111.230.212.103:3306/mybatis?userSSL=true&amp;userUnicode=true&amp;characterEncoding=UTF-8”<br>username = root<br>password = hdk123</p>
</blockquote>
<p>在核心配置文件中引入</p>
<p>mybatis-config.xml (同时有的话，优先走外面properties)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--引入外部配置文件--&gt;</span><br><span class="line">    &lt;!--&lt;properties resource=<span class="string">"db.properties"</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties resource=<span class="string">"db.properties"</span>&gt;</span><br><span class="line">        &lt;property name="username" value="root"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="password" value="hdk123"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--每一个mapper.xml都需要注册--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"com/hou/dao/UserMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p><strong>4. 类型别名（typeAliases）</strong><br>类型别名可为 Java 类型设置一个缩写名字。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;typeAlias type="com.hou.pogo.User" alias="User"&gt;&lt;/typeAlias&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>扫描实体类的包，默认别名就为这个类的类名首字母小写</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;package name="com.hou.pogo"&gt;&lt;/package&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>在实体类，比较少的时候使用第一种，实体类多使用第二种。</p>
<p>第一种可以自定义，第二则不行，但是 若有注解，则别名为其注解值 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 设置</strong><br>| 设置名 | 描述 |有效值  | 默认值 |<br>|–|–|–|–|<br>|cacheEnabled  | 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。 | true / false | true |<br>|lazyLoadingEnabled  | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 | true / false | false |<br>|logImpl  | 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 | SLF4J / LOG4J / LOG4J2 / JDK_LOGGING / COMMONS_LOGGING / STDOUT_LOGGING / NO_LOGGING | 未设置 |</p>
<p><strong>6. 其他</strong><br>1、<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a><br>2、<a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a><br>3、<a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">plugins（插件）</a></p>
<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
<p><strong>7、映射器</strong><br>方式一: [推荐使用]</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=<span class="string">"com/hou/dao/UserMapper.xml"</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.hou.dao.UserMapper"</span> /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口和它的Mapper必须同名 </li>
<li>接口和他的Mapper必须在同一包下</li>
</ul>
<p>方式三：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;!--&lt;mapper resource=<span class="string">"com/hou/dao/UserMapper.xml"</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.hou.dao.UserMapper"</span> /&gt;--&gt;</span><br><span class="line">    &lt;<span class="keyword">package</span> name=<span class="string">"com.hou.dao"</span> /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口和它的Mapper必须同名 </li>
<li>接口和他的Mapper必须在同一包下</li>
</ul>
<p><strong>8.生命周期和作用域</strong><br>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题。</strong></p>
<p><strong>SqlSessionFactoryBuilder:</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了 。</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>就是数据库连接池。 </li>
<li>一旦被创建就应该在应用的运行期间一直存在 ，没有任何理由丢弃它或重新创建另一个实例 。 多次重建SqlSessionFactory 被视为一种代码“坏习惯”</li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li>
<li>最简单的就是使用单例模式或者静态单例模式。</li>
</ul>
<p><strong>SqlSession：</strong></p>
<ul>
<li>每个线程都应该有它自己的 SqlSession 实例。 </li>
<li>连接到连接池的请求！ </li>
<li>SqlSession的实例不是线程安全的，因此是不能被共享的 ，所以它的最佳的作用域是请求或方法作用域。 </li>
<li>用完之后赶紧关闭，否则资源被占用。</li>
</ul>
<h1 id="四、解决属性名和字段名不一致的问题"><a href="#四、解决属性名和字段名不一致的问题" class="headerlink" title="四、解决属性名和字段名不一致的问题"></a>四、解决属性名和字段名不一致的问题</h1><p>数据库中的字段</p>
<p>新建一个项目，拷贝之前，测试实体字段不一致的情况</p>
<p>User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pogo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>User{id=2, name=’wang’, password=’null’}</p>
<p>解决方法：</p>
<p>核心配置文件</p>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getUserById"</span> resultType=<span class="string">"User"</span></span><br><span class="line">    parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>resultMap 结果集映射</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace绑定一个对应的mapper接口--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.dao.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserById"</span> resultMap=<span class="string">"UserMap"</span> parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--结果集映射--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"UserMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">        &lt;!--colunm 数据库中的字段，property实体中的属性--&gt;</span><br><span class="line">        &lt;result column="id" property="id"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column="name" property="name"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column="pwd" property="password"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>resultMap 元素是 MyBatis 中最重要最强大的元素。</li>
<li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"UserMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;!--colunm 数据库中的字段，property实体中的属性--&gt;</span><br><span class="line">    &lt;!--&lt;result column="id" property="id"&gt;&lt;/result&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;result column="name" property="name"&gt;&lt;/result&gt;--&gt;</span><br><span class="line">    &lt;result column="pwd" property="password"&gt;&lt;/result&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<h1 id="五-日志"><a href="#五-日志" class="headerlink" title="五. 日志"></a>五. 日志</h1><p><strong>1. 日志工厂</strong><br>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手。</p>
<p>曾经：sout，debug</p>
<p>现在：日志工厂</p>
<p>logImpl</p>
<ul>
<li>SLF4J </li>
<li>LOG4J [掌握] </li>
<li>LOG4J2 </li>
<li>JDK_LOGGING </li>
<li>COMMONS_LOGGING </li>
<li>STDOUT_LOGGING[掌握] </li>
<li>NO_LOGGING</li>
</ul>
<p>具体使用哪一个，在设置中设定</p>
<p>STDOUT_LOGGING 标志日志输出</p>
<p>mybatis-confi中</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"logImpl"</span> value=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. Log4j</strong><br>1、先导包</p>
<p>pom.xml下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>2、新建log4j.properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">###set log levels###</span><br><span class="line">log4j.rootLogger = DEBUG,console,file</span><br><span class="line"></span><br><span class="line">###输出到控制台###</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold = DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern = [%c]-%m%n</span><br><span class="line"></span><br><span class="line">###输出到日志文件 ###</span><br><span class="line">log4j.appender.file=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/hou.log</span><br><span class="line">log4j.appender.file.MaxFileSize=<span class="number">10</span>mb </span><br><span class="line">log4j.appender.file.Threshold=DEBUG </span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>


<p>3、配置实现</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"logImpl"</span> value=<span class="string">"LOG4J"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>

<p>4、Log4j使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hou.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            logger.info(<span class="string">"测试"</span>);</span><br><span class="line">            User user = userDao.getUserById(<span class="number">2</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"info:进入了testlog4j"</span>);</span><br><span class="line">        logger.debug(<span class="string">"debug:进入了testlog4j"</span>);</span><br><span class="line">        logger.error(<span class="string">"error:进入了testlog4j"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、-分页"><a href="#六、-分页" class="headerlink" title="六、 分页"></a>六、 分页</h1><p><strong>1. Limit 分页</strong><br>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT * from user limit startIndex,pageSize;</span><br><span class="line">SELECT * from user limit <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;!--namespace绑定一个对应的mapper接口--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.dao.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserById"</span> resultMap=<span class="string">"UserMap"</span></span><br><span class="line">    parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--结果集映射--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">"UserMap"</span> type=<span class="string">"User"</span>&gt;</span><br><span class="line">        &lt;!--colunm 数据库中的字段，property实体中的属性--&gt;</span><br><span class="line">        &lt;!--&lt;result column="id" property="id"&gt;&lt;/result&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;result column="name" property="name"&gt;&lt;/result&gt;--&gt;</span><br><span class="line">        &lt;result column="pwd" property="password"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserByLimit"</span> parameterType=<span class="string">"map"</span></span><br><span class="line">            resultType=<span class="string">"User"</span> resultMap=<span class="string">"UserMap"</span>&gt;</span><br><span class="line">      select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">"startIndex"</span>, <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"pageSize"</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. RowBounds分页</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//RowBounds实现</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过java代码层面</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList</span><br><span class="line">        (<span class="string">"com.hou.dao.UserMapper.getUserByRowBounds"</span>,</span><br><span class="line">         <span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 分页插件</strong><br>pageHelper</p>
<h1 id="七、-使用注解开发"><a href="#七、-使用注解开发" class="headerlink" title="七、 使用注解开发"></a>七、 使用注解开发</h1><ol>
<li>删除 UserMapper.xml</li>
<li>UserMapper</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>核心配置 mybatis-config.xml</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--引入外部配置文件--&gt;</span><br><span class="line">    &lt;properties resource=<span class="string">"db.properties"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--可以给实体类起别名--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type="com.hou.pojo.User" alias="User"&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--绑定接口--&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class="com.hou.dao.UserMapper"&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>本质：反射机制</p>
<p>底层：动态代理！</p>
<h3 id="Mybatis详细执行流程："><a href="#Mybatis详细执行流程：" class="headerlink" title="Mybatis详细执行流程："></a>Mybatis详细执行流程：</h3><ol>
<li>Resource获取全局配置文件  </li>
<li>实例化SqlsessionFactoryBuilder</li>
<li>解析配置文件流XMLCondigBuilder</li>
<li>Configration所有的配置信息</li>
<li>SqlSessionFactory实例化</li>
<li>trasactional事务管理</li>
<li>创建executor执行器</li>
<li>创建SqlSession</li>
<li>实现CRUD</li>
<li>查看是否执行成功</li>
<li>提交事务</li>
<li>关闭</li>
</ol>
<h3 id="注解CRUD"><a href="#注解CRUD" class="headerlink" title="注解CRUD"></a>注解CRUD</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法存在多个参数，所有的参数必须加@Param</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user (id, name, pwd) values"</span> +</span><br><span class="line">            <span class="string">"(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;, pwd=#&#123;password&#125; "</span> +</span><br><span class="line">            <span class="string">"where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MybatisUtile</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hou.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            List&lt;User&gt; userList = userDao.getUsers();</span><br><span class="line">            <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getuserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            User user = userDao.getUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            userDao.addUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"kun"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            userDao.updateUser(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"fang"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.执行 getmapper</span></span><br><span class="line">            UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            userDao.deleteUser(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八-、Lombok"><a href="#八-、Lombok" class="headerlink" title="八.、Lombok"></a>八.、Lombok</h1><ol>
<li>在IDEA中安装lombok插件</li>
<li>配置</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.18.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><blockquote>
<p>@Getter and @Setter<br>@FieldNameConstants<br>@ToString<br>@EqualsAndHashCode<br>@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor<br>@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog,<br>@Flogger, @CustomLog<br>@Data<br>@Builder<br>@SuperBuilder<br>@Singular<br>@Delegate<br>@Value<br>@Accessors<br>@Wither<br>@With<br>@SneakyThrows<br>@Data:无参构造，get，set，toString，hashCode</p>
</blockquote>
</li>
</ol>
<p>在实体类上加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="九、多对一处理"><a href="#九、多对一处理" class="headerlink" title="九、多对一处理"></a>九、多对一处理</h1><ul>
<li>多个学生关联一个老师（多对一）</li>
<li>集合（一对多）</li>
</ul>
<h3 id="1、建表"><a href="#1、建表" class="headerlink" title="1、建表"></a>1、建表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `teacher` (</span><br><span class="line">	`id` INT(<span class="number">10</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">	`name` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line"><span class="function">INSERT INTO <span class="title">teacher</span> <span class="params">(`id`, `name`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">'hou'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">	`id` INT(<span class="number">10</span>) NOT NULL,</span><br><span class="line">	`name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">	`tid` INT(<span class="number">10</span>) DEFAULT NULL,</span><br><span class="line">	<span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span>,</span></span><br><span class="line"><span class="function">	KEY `fktid` <span class="params">(`tid`)</span>,</span></span><br><span class="line"><span class="function">	CONSTRAINT `fktid` FOREIGN <span class="title">KEY</span> <span class="params">(`tid`)</span> REFERENCES `teacher` <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">)ENGINE</span>=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line"><span class="function">INSERT INTO <span class="title">student</span> <span class="params">(`id`, `name`, `tid`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">'xiao1'</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">student</span> <span class="params">(`id`, `name`, `tid`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">'xiao2'</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">student</span> <span class="params">(`id`, `name`, `tid`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">'xiao3'</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">student</span> <span class="params">(`id`, `name`, `tid`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">4</span>, <span class="string">'xiao4'</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">student</span> <span class="params">(`id`, `name`, `tid`)</span> <span class="title">VALUES</span> <span class="params">(<span class="number">5</span>, <span class="string">'xiao5'</span>, <span class="number">1</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>1、新建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生需要关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、建立Mapper接口</p>
<p>3、建立Mapper.xml</p>
<p>4、测试是否能够成功</p>
<h3 id="2、按照查询嵌套处理"><a href="#2、按照查询嵌套处理" class="headerlink" title="2、按照查询嵌套处理"></a>2、按照查询嵌套处理</h3><p>StudentMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.dao.StudentMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getStudent"</span> resultMap=<span class="string">"StudentTeacher"</span>&gt;</span><br><span class="line">      select * from student;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">"StudentTeacher"</span> type=<span class="string">"com.hou.pojo.Student"</span>&gt;</span><br><span class="line">        &lt;result property="id" column="id"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="name" column="name"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--对象使用assiociation--&gt;</span><br><span class="line">        &lt;!--集合用collection--&gt;</span><br><span class="line">        &lt;association property=<span class="string">"teacher"</span> column=<span class="string">"tid"</span></span><br><span class="line">                     javaType=<span class="string">"com.hou.pojo.Teacher"</span></span><br><span class="line">                     select="getTeacher"&gt;&lt;/association&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getTeacher"</span> resultType=<span class="string">"com.hou.pojo.Teacher"</span>&gt;</span><br><span class="line">      select * from teacher where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、按照结果嵌套处理"><a href="#3、按照结果嵌套处理" class="headerlink" title="3、按照结果嵌套处理"></a>3、按照结果嵌套处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select s.id sid,s.name sname,t.name tname</span><br><span class="line">from student s,teacher t where s.tid=t.id;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getStudent2"</span> resultMap=<span class="string">"StudentTeacher2"</span>&gt;</span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t where s.tid=t.id;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"StudentTeacher2"</span> type=<span class="string">"com.hou.pojo.Student"</span>&gt;</span><br><span class="line">    &lt;result property="id" column="sid"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="name" column="sname"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;association property=<span class="string">"teacher"</span> javaType=<span class="string">"com.hou.pojo.Teacher"</span>&gt;</span><br><span class="line">        &lt;result property="name" column="tname"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>property 映射到列结果的字段或属性。</p>
<p>column 数据库中的列名，或者是列的别名。</p>
<h1 id="十、一对多"><a href="#十、一对多" class="headerlink" title="十、一对多"></a>十、一对多</h1><p>一个老师拥有多个学生</p>
<p>对于老师而言就是一对多</p>
<h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-按照结果查询"><a href="#2-按照结果查询" class="headerlink" title="2. 按照结果查询"></a>2. 按照结果查询</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getTeacher"</span> resultMap=<span class="string">"TeacherStudent"</span>&gt;</span><br><span class="line">    select s.id sid, s.name sname, t.name tname, t.id tid</span><br><span class="line">    from student s, teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;id&#125;;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"TeacherStudent"</span> type=<span class="string">"com.hou.pojo.Teacher"</span>&gt;</span><br><span class="line">    &lt;result property="id" column="tid"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property="name" column="tname"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;!--集合中的泛型信息，我们用oftype获取--&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"studentList"</span> ofType=<span class="string">"com.hou.pojo.Student"</span>&gt;</span><br><span class="line">        &lt;result property="id" column="sid"&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result property="name" column="sname"&gt;&lt;/result&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-按照查询嵌套处理"><a href="#3-按照查询嵌套处理" class="headerlink" title="3. 按照查询嵌套处理"></a>3. 按照查询嵌套处理</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getTeacher2"</span> resultMap=<span class="string">"TeacherStudent2"</span>&gt;</span><br><span class="line">    select * from mybatis.teacher where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"TeacherStudent2"</span> type=<span class="string">"com.hou.pojo.Teacher"</span>&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"studentList"</span> column=<span class="string">"id"</span> javaType=<span class="string">"ArrayList"</span></span><br><span class="line">                ofType=<span class="string">"com.hou.pojo.Student"</span></span><br><span class="line">                select="getStudentByTeacherId"&gt;&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getStudentByTeacherId"</span> resultType=<span class="string">"com.hou.pojo.Student"</span>&gt;</span><br><span class="line">    select * from mybatis.student where tid = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>关联 - association 多对一 </li>
<li>集合 - collection 一对多 </li>
<li>javaType &amp; ofType<pre><code>JavaType用来指定实体中属性类型         
 ofType映射到list中的类型，泛型中的约束类型</code></pre></li>
</ol>
<p>注意点：</p>
<ul>
<li>保证sql可读性，尽量保证通俗易懂 </li>
<li>注意字段问题 </li>
<li>如果问题不好排查错误，使用日志</li>
</ul>
<h1 id="十一、动态sql"><a href="#十一、动态sql" class="headerlink" title="十一、动态sql"></a>十一、动态sql</h1><p>动态sql：根据不同的条件生成不同的SQL语句</p>
<h3 id="1、-搭建环境"><a href="#1、-搭建环境" class="headerlink" title="1、 搭建环境"></a>1、 搭建环境</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create table `blog`(</span><br><span class="line">	`id` varchar(<span class="number">50</span>) not <span class="keyword">null</span> comment <span class="string">'博客id'</span>,</span><br><span class="line">    `title` varchar(<span class="number">100</span>) not <span class="keyword">null</span> comment <span class="string">'博客标题'</span>,</span><br><span class="line">    `author` varchar(<span class="number">30</span>) not <span class="keyword">null</span> comment <span class="string">'博客作者'</span>,</span><br><span class="line">    `create_time` datetime not <span class="keyword">null</span> comment <span class="string">'创建时间'</span>,</span><br><span class="line">    `views` <span class="keyword">int</span>(<span class="number">30</span>) not <span class="keyword">null</span> comment <span class="string">'浏览量'</span></span><br><span class="line">	)ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"mapUnderscoreToCamelCase"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<p>Mapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hou.mapper.BlogMapper"</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"addBlog"</span> parameterType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">        insert into mybatis.blog (id, title, author, create_time, views) values</span><br><span class="line">        (#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;create_time&#125;, #&#123;views&#125;);</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>新建随机生成ID包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：添加数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hou.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> com.hou.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> com.hou.utils.IDUtiles;</span><br><span class="line"><span class="keyword">import</span> com.hou.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">        blog.setId(IDUtiles.getId());</span><br><span class="line">        blog.setAuthor(<span class="string">"houdongun"</span>);</span><br><span class="line">        blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        blog.setViews(<span class="number">999</span>);</span><br><span class="line">        blog.setTitle(<span class="string">"first"</span>);</span><br><span class="line"></span><br><span class="line">        blogMapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtiles.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"second"</span>);</span><br><span class="line">        blogMapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtiles.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"third"</span>);</span><br><span class="line">        blogMapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtiles.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"forth"</span>);</span><br><span class="line">        blogMapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-if"><a href="#2-if" class="headerlink" title="2. if"></a>2. if</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryBlogIF"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    select * from mybatis.blog where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"title != null"</span>&gt;</span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"author != author"</span>&gt;</span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIF</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        map.put("title", "second");</span></span><br><span class="line">    map.put(<span class="string">"author"</span>, <span class="string">"houdongun"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; list = blogMapper.queryBlogIF(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Blog blog : list) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-choose、when、otherwise"><a href="#3-choose、when、otherwise" class="headerlink" title="3. choose、when、otherwise"></a>3. choose、when、otherwise</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"queryBlogchoose"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=<span class="string">"title != null"</span>&gt;</span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=<span class="string">"author != null"</span>&gt;</span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-trim、where、set"><a href="#4-trim、where、set" class="headerlink" title="4. trim、where、set"></a>4. trim、where、set</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateBlog"</span> parameterType=<span class="string">"map"</span>&gt;</span><br><span class="line">    update mybatis.blog</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"title != null"</span>&gt;</span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"author != null"</span>&gt;</span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure>

<p>trim 可以自定义</p>
<h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p>有些时候我们有一些公共部分</p>
<p>1、使用sql便签抽取公共部分</p>
<p>2、在使用的地方使用include标签</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;sql id=<span class="string">"if-title-author"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"title != null"</span>&gt;</span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"author != null"</span>&gt;</span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"queryBlogIF"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;include refid="if-title-author"&gt;&lt;/include&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>最好基于单表<br>sql里不要存在where标签</p>
<h3 id="5-for-each"><a href="#5-for-each" class="headerlink" title="5. for-each"></a>5. for-each</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--ids是传的，#&#123;id&#125;是遍历的--&gt;</span><br><span class="line">&lt;select id=<span class="string">"queryBlogForeach"</span> parameterType=<span class="string">"map"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"id"</span> open=<span class="string">"and ("</span></span><br><span class="line">                 close=<span class="string">")"</span> separator=<span class="string">"or"</span>&gt;</span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">"ids"</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; list = blogMapper.queryBlogForeach(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Blog blog : list) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二-缓存（了解）"><a href="#十二-缓存（了解）" class="headerlink" title="十二. 缓存（了解）"></a>十二. 缓存（了解）</h1><h3 id="1-一级缓存"><a href="#1-一级缓存" class="headerlink" title="1. 一级缓存"></a>1. 一级缓存</h3><p>1、开启日志<br>2、测试一个session中查询两次相同记录。</p>
<p>缓存失效：<br>1、映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。<br>2、查询不同的mapper.xml<br>3、手动清除缓存<br>一级缓存默认开启，只在一次sqlseesion中有效</p>
<h3 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2. 二级缓存"></a>2. 二级缓存</h3><p>1、开启全局缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>2、在当前mapper.xml中使用二级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;cache eviction=<span class="string">"FIFO"</span></span><br><span class="line">       flushInterval=<span class="string">"60000"</span></span><br><span class="line">       size=<span class="string">"512"</span></span><br><span class="line">       readOnly=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    SqlSession sqlSession1 = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = userMapper.queryUserByid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.queryUserByid(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    System.out.println(user==user1);</span><br><span class="line">    sqlSession1.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只用cache时加序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure>

<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hou.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<p>1、只有开启了二级缓存，在Mapper下有效<br>2、所有数据都会先放在一级缓存<br>3、只有当回话提交，或者关闭的时候，才会提交到二级缓存</p>
<h3 id="3-自定义缓存-ehcache"><a href="#3-自定义缓存-ehcache" class="headerlink" title="3. 自定义缓存-ehcache"></a>3. 自定义缓存-ehcache</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>ehcache.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:noNamespaceSchemaLocation=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span><br><span class="line">         updateCheck=<span class="string">"false"</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="line">       user.home – 用户主目录</span><br><span class="line">       user.dir  – 用户当前工作目录</span><br><span class="line">       java.io.tmpdir – 默认临时文件路径</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;diskStore path=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span>/&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      name:缓存名称。</span><br><span class="line">      maxElementsInMemory:缓存最大数目</span><br><span class="line">      maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="line">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="line">      overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="line">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=<span class="keyword">false</span>对象不是永久有效时使用，可选属性，默认值是<span class="number">0</span>，也就是可闲置时间无穷大。</span><br><span class="line">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=<span class="keyword">false</span>对象不是永久有效时使用，默认是<span class="number">0</span>.，也就是对象存活时间无穷大。</span><br><span class="line">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The <span class="keyword">default</span> value is <span class="keyword">false</span>.</span><br><span class="line">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是<span class="number">30</span>MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="line">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是<span class="number">120</span>秒。</span><br><span class="line">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="line">      clearOnFlush：内存数量最大时是否清除。</span><br><span class="line">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="line">      FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="line">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="line">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="line">   --&gt;</span><br><span class="line">    &lt;defaultCache</span><br><span class="line">            eternal=<span class="string">"false"</span></span><br><span class="line">            maxElementsInMemory=<span class="string">"10000"</span></span><br><span class="line">            overflowToDisk=<span class="string">"false"</span></span><br><span class="line">            diskPersistent=<span class="string">"false"</span></span><br><span class="line">            timeToIdleSeconds=<span class="string">"1800"</span></span><br><span class="line">            timeToLiveSeconds=<span class="string">"259200"</span></span><br><span class="line">            memoryStoreEvictionPolicy=<span class="string">"LRU"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache</span><br><span class="line">            name=<span class="string">"cloud_user"</span></span><br><span class="line">            eternal=<span class="string">"false"</span></span><br><span class="line">            maxElementsInMemory=<span class="string">"5000"</span></span><br><span class="line">            overflowToDisk=<span class="string">"false"</span></span><br><span class="line">            diskPersistent=<span class="string">"false"</span></span><br><span class="line">            timeToIdleSeconds=<span class="string">"1800"</span></span><br><span class="line">            timeToLiveSeconds=<span class="string">"1800"</span></span><br><span class="line">            memoryStoreEvictionPolicy=<span class="string">"LRU"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM框架相关</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
